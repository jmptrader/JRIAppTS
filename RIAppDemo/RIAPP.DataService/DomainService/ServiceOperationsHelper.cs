using RIAPP.DataService.Resources;
using RIAPP.DataService.Types;
using RIAPP.DataService.Utils;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace RIAPP.DataService
{
    internal class ServiceOperationsHelper
    {
        private BaseDomainService _domainService;
        private IServiceContainer _services;

        public ServiceOperationsHelper(BaseDomainService domainService)
        {
            this._domainService = domainService;
            this._services = domainService.ServiceContainer;
        }

        public void ApplyValues(object entity, RowInfo rowInfo, string path, ValueChange[] values, bool isOriginal)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            var dataHelper = this._services.DataHelper;
            Array.ForEach(values, (val) =>
            {
                string fullName = path + val.fieldName;
                Field fieldInfo = dataHelper.getFieldInfo(dbSetInfo, fullName);
                if (!fieldInfo.GetIsIncludeInResult())
                    return;
                //Server Side calculated fields are never set on entities from updates
                if (fieldInfo.fieldType == FieldType.ServerCalculated)
                    return;

                if (fieldInfo.fieldType == FieldType.Object && val.nested != null)
                {
                    this.ApplyValues(entity, rowInfo, fullName + '.', val.nested.ToArray(), isOriginal);
                }
                else
                {
                    this.ApplyValue(entity, rowInfo, fullName, fieldInfo, val, isOriginal);
                }
            });
        }

        private void ApplyValue(object entity, RowInfo rowInfo, string fullName, Field fieldInfo, ValueChange val, bool isOriginal)
        {
            var dataHelper = this._services.DataHelper;
            if (isOriginal)
            {
                if ((val.flags & ValueFlags.Setted) == ValueFlags.Setted)
                    dataHelper.SetFieldValue(entity, fullName, fieldInfo, val.orig);
            }
            else
            {
                switch (rowInfo.changeType)
                {
                    case ChangeType.Deleted:
                        {
                            //For delete fill only original values
                            if ((val.flags & ValueFlags.Setted) == ValueFlags.Setted)
                                dataHelper.SetFieldValue(entity, fullName, fieldInfo, val.orig);
                        }
                        break;
                    case ChangeType.Added:
                        {
                            if (fieldInfo.isAutoGenerated)
                                return;
                            if ((val.flags & ValueFlags.Changed) == ValueFlags.Changed)
                            {
                                if (fieldInfo.isReadOnly && val.val != null && !fieldInfo.allowClientDefault)
                                {
                                    throw new DomainServiceException(string.Format(ErrorStrings.ERR_PROPERTY_IS_READONLY, entity.GetType().Name, fieldInfo.fieldName));
                                }
                                if (fieldInfo.isAutoGenerated && val.val != null)
                                {
                                    throw new DomainServiceException(string.Format(ErrorStrings.ERR_PROPERTY_IS_READONLY, entity.GetType().Name, fieldInfo.fieldName));
                                }
                                dataHelper.SetFieldValue(entity, fullName, fieldInfo, val.val);
                            }
                        }
                        break;
                    case ChangeType.Updated:
                        {
                            if ((val.flags & ValueFlags.Changed) == ValueFlags.Changed)
                            {
                                if (fieldInfo.isReadOnly || (fieldInfo.isPrimaryKey > 0 || fieldInfo.fieldType == FieldType.RowTimeStamp || fieldInfo.isAutoGenerated))
                                    throw new DomainServiceException(string.Format(ErrorStrings.ERR_PROPERTY_IS_READONLY, entity.GetType().Name, fieldInfo.fieldName));
                                if (!fieldInfo.isNullable && val.val == null)
                                {
                                    throw new DomainServiceException(string.Format(ErrorStrings.ERR_FIELD_IS_NOT_NULLABLE, fieldInfo.fieldName));
                                }
                                dataHelper.SetFieldValue(entity, fullName, fieldInfo, val.val);
                            }
                            else if ((val.flags & ValueFlags.Setted) == ValueFlags.Setted)
                            {
                                if ((fieldInfo.isPrimaryKey > 0 || fieldInfo.fieldType == FieldType.RowTimeStamp || fieldInfo.isNeedOriginal) && val.val != val.orig)
                                {
                                    throw new DomainServiceException(string.Format(ErrorStrings.ERR_VAL_ORIGINAL_INVALID, fieldInfo.fieldName));
                                }
                                dataHelper.SetFieldValue(entity, fullName, fieldInfo, val.val);
                            }
                        }
                        break;
                }
            }
        }

        public void UpdateEntityFromRowInfo(object entity, RowInfo rowInfo, bool isOriginal)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            var values = rowInfo.values;
            this.ApplyValues(entity, rowInfo, "", rowInfo.values.ToArray(), isOriginal);
            var dataHelper = this._services.DataHelper;

            if (!isOriginal && rowInfo.changeType == ChangeType.Added)
            {
                foreach (var pn in rowInfo.changeState.ParentRows)
                {
                    if (!dataHelper.SetValue(entity, pn.association.childToParentName, pn.ParentRow.changeState.Entity, false))
                    {
                        throw new DomainServiceException(string.Format(ErrorStrings.ERR_CAN_NOT_SET_PARENT_FIELD, pn.association.childToParentName, rowInfo.dbSetInfo.EntityType.Name));
                    }
                }
            }
        }

        public void UpdateValuesFromEntity(object entity, string path, DbSetInfo dbSetInfo, ValueChange[] values)
        {
            var dataHelper = this._services.DataHelper;
            Array.ForEach(values, (val) =>
            {
                string fullName = path + val.fieldName;
                Field fieldInfo = dataHelper.getFieldInfo(dbSetInfo, fullName);
                if (!fieldInfo.GetIsIncludeInResult())
                    return;
                if (fieldInfo.fieldType == FieldType.Object && val.nested != null)
                {
                    this.UpdateValuesFromEntity(entity, fullName + '.', dbSetInfo, val.nested.ToArray());
                }
                else
                {
                    val.val = dataHelper.SerializeField(entity, fullName, fieldInfo);
                    val.flags = val.flags | ValueFlags.Refreshed;
                }
            });
        }

        public void CheckValuesChanges(RowInfo rowInfo, string path, ValueChange[] values)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            var dataHelper = this._services.DataHelper;
            Array.ForEach(values, (val) =>
            {
                string fullName = path + val.fieldName;
                Field fieldInfo = dataHelper.getFieldInfo(dbSetInfo, fullName);
                if (!fieldInfo.GetIsIncludeInResult())
                    return;
                if (fieldInfo.fieldType == FieldType.Object && val.nested != null)
                {
                    this.CheckValuesChanges(rowInfo, fullName + '.', val.nested.ToArray());
                }
                else
                {
                    string newVal;
                    if (this.isEntityValueChanged(rowInfo, fullName, fieldInfo, out newVal))
                    {
                        val.val = newVal;
                        val.flags = val.flags | ValueFlags.Refreshed;
                    }
                }
            });
        }

        public void UpdateRowInfoFromEntity(object entity, RowInfo rowInfo)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            this.UpdateValuesFromEntity(entity, "", dbSetInfo, rowInfo.values.ToArray());
            if (rowInfo.changeType == ChangeType.Added)
            {
                rowInfo.serverKey = rowInfo.GetRowKeyAsString();
            }
        }

        public bool isEntityValueChanged(RowInfo rowInfo, string fullName, Field fieldInfo, out string newVal)
        {
            EntityChangeState changeState = rowInfo.changeState;
            var dataHelper = this._services.DataHelper;
            string oldVal = null;
            newVal = dataHelper.SerializeField(changeState.Entity, fullName, fieldInfo);
            if (changeState.OriginalEntity != null)
                oldVal = dataHelper.SerializeField(changeState.OriginalEntity, fullName, fieldInfo);
            return (newVal != oldVal);
        }

        public void UpdateRowInfoAfterUpdates(RowInfo rowInfo)
        {
            this.CheckValuesChanges(rowInfo, "", rowInfo.values.ToArray());

            if (rowInfo.changeType == ChangeType.Added)
            {
                rowInfo.serverKey = rowInfo.GetRowKeyAsString();
            }
        }

        public T GetOriginalEntity<T>(RowInfo rowInfo)
          where T : class
        {
            if (rowInfo == null)
            {
                throw new DomainServiceException(ErrorStrings.ERR_METH_APPLY_INVALID);
            }
            return (T)rowInfo.changeState.OriginalEntity;
        }

        public object GetOriginalEntity(object entity, RowInfo rowInfo)
        {
            object dbEntity = Activator.CreateInstance(entity.GetType());
            UpdateEntityFromRowInfo(dbEntity, rowInfo, true);
            return dbEntity;
        }

        public T GetParentEntity<T>(RowInfo rowInfo)
            where T : class
        {
            if (rowInfo == null)
            {
                throw new DomainServiceException(ErrorStrings.ERR_METH_APPLY_INVALID);
            }
            var parents = rowInfo.changeState.ParentRows;
            if (parents.Length == 0)
                return (T)null;

            return (T)parents.Where(p => p.ParentRow.dbSetInfo.EntityType == typeof(T)).Select(p => p.ParentRow.changeState.Entity).FirstOrDefault();
        }


        public void InsertEntity(RowInfo rowInfo)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            if (rowInfo.changeType != ChangeType.Added)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_REC_CHANGETYPE_INVALID, dbSetInfo.EntityType.Name, rowInfo.changeType));
            MethodInfo methInfo = dbSetInfo.getOperationMethodInfo(MethodType.Insert);
            if (methInfo == null)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_DB_INSERT_NOT_IMPLEMENTED, dbSetInfo.EntityType.Name, this.GetType().Name));
            object dbEntity = Activator.CreateInstance(dbSetInfo.EntityType);
            UpdateEntityFromRowInfo(dbEntity, rowInfo, false);
            rowInfo.changeState.Entity = dbEntity;
            methInfo.Invoke(this._domainService, new object[] { dbEntity });
        }

        public void UpdateEntity(RowInfo rowInfo)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            if (rowInfo.changeType != ChangeType.Updated)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_REC_CHANGETYPE_INVALID, dbSetInfo.EntityType.Name, rowInfo.changeType));
            MethodInfo methInfo = dbSetInfo.getOperationMethodInfo(MethodType.Update);
            if (methInfo == null)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_DB_UPDATE_NOT_IMPLEMENTED, dbSetInfo.EntityType.Name, this.GetType().Name));
            object dbEntity = Activator.CreateInstance(dbSetInfo.EntityType);
            UpdateEntityFromRowInfo(dbEntity, rowInfo, false);
            var original = this.GetOriginalEntity(dbEntity, rowInfo);
            rowInfo.changeState.Entity = dbEntity;
            rowInfo.changeState.OriginalEntity = original;
            //apply this changes to entity that is in the database (this is done in user domain service method)
            methInfo.Invoke(this._domainService, new object[] { dbEntity });
        }

        public void DeleteEntity(RowInfo rowInfo)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            if (rowInfo.changeType != ChangeType.Deleted)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_REC_CHANGETYPE_INVALID, dbSetInfo.EntityType.Name, rowInfo.changeType));

            MethodInfo methInfo = dbSetInfo.getOperationMethodInfo(MethodType.Delete);
            if (methInfo == null)
                throw new DomainServiceException(string.Format(ErrorStrings.ERR_DB_DELETE_NOT_IMPLEMENTED, dbSetInfo.EntityType.Name, this.GetType().Name));

            object dbEntity = Activator.CreateInstance(dbSetInfo.EntityType);
            UpdateEntityFromRowInfo(dbEntity, rowInfo, true);
            rowInfo.changeState.Entity = dbEntity;
            rowInfo.changeState.OriginalEntity = dbEntity;
            methInfo.Invoke(this._domainService, new object[] { dbEntity });
        }

        public async Task<bool> ValidateEntity(RowInfo rowInfo)
        {
            DbSetInfo dbSetInfo = rowInfo.dbSetInfo;
            IEnumerable<ValidationErrorInfo> errs = null;
            LinkedList<string> mustBeChecked = new LinkedList<string>();
            LinkedList<string> skipCheckList = null;
            var dataHelper = this._services.DataHelper;
            var validationHelper = this._services.ValidationHelper;

            if (rowInfo.changeType == ChangeType.Added)
            {
                skipCheckList = new LinkedList<string>();
                foreach (var pn in rowInfo.changeState.ParentRows)
                {
                    foreach (var frel in pn.association.fieldRels)
                    {
                        skipCheckList.AddLast(frel.childField);
                    }
                }
            }

            foreach (var fieldInfo in dbSetInfo.fieldInfos)
            {
                dataHelper.ForEachFieldInfo("", fieldInfo, (string fullName, Field f) =>
                {
                    if (!f.GetIsIncludeInResult())
                        return;
                    if (f.fieldType == FieldType.Object || f.fieldType == FieldType.ServerCalculated)
                        return;

                    string value = dataHelper.SerializeField(rowInfo.changeState.Entity, fullName, f);
                    if (rowInfo.changeType == ChangeType.Added)
                    {
                        bool isSkip = f.isAutoGenerated || (skipCheckList != null && skipCheckList.Any(n => n == fullName));
                        if (!isSkip)
                        {
                            validationHelper.CheckValue(f, value);
                            mustBeChecked.AddLast(fullName);
                        }
                    }
                    else if (rowInfo.changeType == ChangeType.Updated)
                    {
                        string newVal;
                        bool isChanged = isEntityValueChanged(rowInfo, fullName, f, out newVal);
                        if (isChanged)
                        {
                            validationHelper.CheckValue(f, newVal);
                        }
                        if (isChanged)
                            mustBeChecked.AddLast(fullName);
                    }
                });
            }

            rowInfo.changeState.NamesOfChangedFields = mustBeChecked.ToArray();
            MethodInfo methInfo = dbSetInfo.getOperationMethodInfo(MethodType.Validate);
            if (methInfo != null)
            {
                var invokeRes = methInfo.Invoke(this._domainService, new object[] { rowInfo.changeState.Entity, rowInfo.changeState.NamesOfChangedFields });
                errs = (IEnumerable<ValidationErrorInfo>)await GetMethodResult(invokeRes).ConfigureAwait(false);
            }

            if (errs != null && errs.Count() > 0)
            {
                rowInfo.changeState.ValidationErrors = errs.ToArray();
                return false;
            }

            return true;
        }

        public static async Task<object> GetMethodResult(object invokeRes)
        {
            var typeInfo = invokeRes != null ? invokeRes.GetType() : null;
            if (typeInfo != null && invokeRes is Task)
            {
                await ((Task)invokeRes).ConfigureAwait(false);
                return typeInfo.GetProperty("Result").GetValue(invokeRes, null);
            }
            else
                return invokeRes;
        }
    }
}
